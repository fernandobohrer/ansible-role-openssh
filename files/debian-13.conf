# -----------------------------------------------------------------------------
# Restrict key exchange, cipher, and MAC algorithms, as per the sshaudit.com
# hardening guide available here:
# https://www.sshaudit.com/hardening_guides.html#debian_12
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# At the time this file is being created, the hardening guide for Debian 13
# isn't available yet so the hardening guide for Debian 12 is being used instead.
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# The configuration below almost matches what can be found in the above link. The differences are:
#
#  - In 'Ciphers' the 'chacha20-poly1305@openssh.com' option was removed because of CVE-2023-48795 considering the risks associated to unpatched peers.
#
#  - The 'RequiredRSASize 3072' option was removed. This option can be set via the 'openssh__required_rsa_size' variable and is persisted in the main ssh configuration file.
#    The default value for the 'openssh__required_rsa_size' variable is set to 3072 which might cause problems if you are using a default RSA key provided by AWS.
#    By default, when a RSA key is created via the AWS console, the key size is set to 2048 bits.
#    If you are using an ED25519 key, everything should continue to operate normally.
#    Details can be found here: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/create-key-pairs.html
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# Besides the above changes that were already part of the configuration changes
# for Debian 12, in the Debian 13 configuration the following changes were made:
#
#  - In 'KexAlgorithms' the options were modified to:
#    sntrup761x25519-sha512, sntrup761x25519-sha512@openssh.com and mlkem768x25519-sha256.
#    These algorithms were selected because they are being standardised for the SSH protocol
#    as being cryptographically safe against quantum computers. Details can be found here:
#    - https://www.openssh.com/pq.html
#    - https://thinglab.org/2025/08/openssh_post_quantum_kex/
# -----------------------------------------------------------------------------


KexAlgorithms sntrup761x25519-sha512,sntrup761x25519-sha512@openssh.com,mlkem768x25519-sha256

Ciphers aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr

MACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,umac-128-etm@openssh.com

HostKeyAlgorithms sk-ssh-ed25519-cert-v01@openssh.com,ssh-ed25519-cert-v01@openssh.com,rsa-sha2-512-cert-v01@openssh.com,rsa-sha2-256-cert-v01@openssh.com,sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512,rsa-sha2-256

CASignatureAlgorithms sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512,rsa-sha2-256

GSSAPIKexAlgorithms gss-curve25519-sha256-,gss-group16-sha512-

HostbasedAcceptedAlgorithms sk-ssh-ed25519-cert-v01@openssh.com,ssh-ed25519-cert-v01@openssh.com,sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512-cert-v01@openssh.com,rsa-sha2-512,rsa-sha2-256-cert-v01@openssh.com,rsa-sha2-256

PubkeyAcceptedAlgorithms sk-ssh-ed25519-cert-v01@openssh.com,ssh-ed25519-cert-v01@openssh.com,sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512-cert-v01@openssh.com,rsa-sha2-512,rsa-sha2-256-cert-v01@openssh.com,rsa-sha2-256
